BEGIN
--------------------------------------------------------------------
Q1: Implement the following inline functions: 
inline int CircularBufferIsFull(CircularBuffer* que) 
inline int CircularBufferIsEmpty(CircularBuffer* que) 

inline int CircularBufferIsFull(CircularBuffer* que) {
   if (que->readPointer == 0) {
        if (que->writePointer == que->mask) {
            return true;//head is at index 0, tail is at the very end of the buffer
        } else {
            return false;
        }
    } else {
        if (que->readPointer - que->writePointer == 1) {
            return true;//write pointer immediately precedes read pointer, to circular buffer is full
        } else {
            return false;
        }
    }
}
inline int CircularBufferIsEmpty(CircularBuffer* que) {
    return que->readPointer == que->writePointer;
}



--------------------------------------------------------------------
Q2: How to compute "Interrupt Latency"?
To measure it, use an oscilloscope.  Probe one GPIO input, which when toggled generates the interrupt; 
simultaneously probe a GPIO output, which is toggled in the interrupt service routine.
Then compute the time difference between the events
To theoretically predict the latency, you might look at the disassembly;
however, if you're using an RTOS or other complicated interrupt handlers, this may prove difficult



--------------------------------------------------------------------
Q3: Serial pc(USBTX, USBRX); // tx, rx 
    What API (function) do you use to change the baud rate?
	pc.baud(9600);



--------------------------------------------------------------------
Q4: How many bit(s) does TDO have? Is TDO an input or output type? (Ref: JTAG Pins) 
	TDO is "test data out", so it is an output (e.g. out from target microcontroller to your PC)
	TDO is the source of a serial data stream, so it doesn't really have "bits" per se





--------------------------------------------------------------------
Q5:
What is the address of ledArr[0]? 
What is the address of ch? 

This was a tricky one.  I know ledArr[0] would be a global variable (not a const), so it should just be in
static global variable space.  ch is a local variable in main, so it should be on the stack
Playing around with HelloWorld with gdb via pyOCD (and turning off compiler optimizations),
it looks like the stack grows down from 0x1000 8000, and the heap grows up from about 0x1000 0198

http://developer.mbed.org/handbook/Memory-Model supports this finding, as does the datasheet
Datasheet shows that the 32kB of local static RAM is located from 0x1000 0000 to 0x1000 8000

/* 
* Enter a hex number [0-9a-fA-F]; Decode it in 4-bit binary format and display them on 4 on board leds. 
*/ 

#include "mbed.h" 

Serial pc(USBTX, USBRX); // tx, rx 
DigitalOut ledArr[4] = {DigitalOut(LED1), DigitalOut(LED2), DigitalOut(LED3), DigitalOut(LED4)}; 
void DisplayLed(int ch) 
{ 
	int i=0;

	if (ch>='0' && ch<='9')
		ch-='0';
	else if (ch>='A' && ch<='F') {
		ch-='A';
		ch+=10;
	} else if (ch>='a' && ch<='f') {
		ch-='a';
		ch+=10;
	} else
		ch=0;

	for (i=0; i<4; i++) { 
		if(ch& (1<<i))
			ledArr[i] = 1; 
		else
			ledArr[i] = 0;
	} 
} 

int main(void) { 
	int ch; 
	pc.baud(9600); 
	pc.printf("\r\nHello World!"); 
	while(1) { 
		pc.printf("\r\nEnter:"); 
		ch = pc.getc(); 
		pc.putc(ch); 
		DisplayLed(ch); 
	} 
}
